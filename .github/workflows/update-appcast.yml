name: Update Appcast

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  update-appcast:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download Sparkle tools
      run: |
        curl -L -o sparkle.tar.xz https://github.com/sparkle-project/Sparkle/releases/latest/download/Sparkle-for-Swift-Package-Manager.tar.xz
        tar -xf sparkle.tar.xz
        chmod +x bin/generate_appcast
        
    - name: Create docs directory if it doesn't exist
      run: mkdir -p docs
      
    - name: Download release assets for appcast generation
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create a releases directory for Sparkle to scan
        mkdir -p releases_temp
        
        # Get all releases and download their assets
        curl -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/${{ github.repository }}/releases | \
        jq -r '.[] | select(.draft == false and .prerelease == false) | .assets[] | select(.name | endswith(".zip")) | "\(.browser_download_url) \(.name)"' | \
        head -10 | \ # Limit to last 10 releases
        while read url filename; do
          echo "Downloading $filename from $url"
          curl -L -o "releases_temp/$filename" "$url"
        done
        
    - name: Generate appcast
      env:
        SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
      run: |
        # Create private key file
        echo "$SPARKLE_PRIVATE_KEY" > private_key.pem
        
        # Generate appcast from the downloaded releases
        ./bin/generate_appcast \
          --ed-key-file private_key.pem \
          --download-url-prefix "https://github.com/${{ github.repository }}/releases/download/" \
          --release-notes-url-prefix "https://github.com/${{ github.repository }}/releases/tag/" \
          releases_temp/
          
        # Move the generated appcast to docs folder
        mv appcast.xml docs/appcast.xml
        
        # Clean up
        rm private_key.pem
        rm -rf releases_temp
        
    - name: Commit and push appcast
      run: |
        git config --global user.name "Annie Hedgpeth"
        git config --global user.email "annie@hedge-ops.com"
        
        # Check if there are changes
        if git diff --quiet docs/appcast.xml; then
          echo "No changes to appcast"
        else
          git add docs/appcast.xml
          git commit -m "Update appcast for release ${{ github.event.release.tag_name || 'manual trigger' }}"
          git push
        fi