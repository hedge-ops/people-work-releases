name: Update Appcast

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'App version'
        required: false
      build_number:
        description: 'Build number'
        required: false

jobs:
  update-appcast:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Extract version information
      id: extract_version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          # Get version from release tag
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          VERSION="${RELEASE_TAG#v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Get the build number from release metadata
          # Check if the release body contains a structured build number indicator
          RELEASE_BODY="${{ github.event.release.body }}"
          
          # Look for a metadata section with the build number in a structured format
          # Format: <!-- BUILD_NUMBER: 123 -->
          BUILD_NUMBER="${BASH_REMATCH[1]}"
          echo "Found build number in metadata: $BUILD_NUMBER"
        else
          # For manual workflow dispatch
          VERSION="${{ github.event.inputs.version }}"
          BUILD_NUMBER="${{ github.event.inputs.build_number }}"
          
          # If build number isn't provided, generate one based on date
          if [[ -z "$BUILD_NUMBER" ]]; then
            BUILD_NUMBER=$(date +%Y%m%d%H%M)
            echo "Generated build number: $BUILD_NUMBER"
          fi
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
        
        echo "Using Version: $VERSION"
        echo "Using Build Number: $BUILD_NUMBER"
    
    - name: Download Sparkle tools
      run: |
        echo "Downloading Sparkle tools..."
        curl -L -o sparkle.zip https://github.com/sparkle-project/Sparkle/releases/download/2.7.1/Sparkle-for-Swift-Package-Manager.zip
        unzip -o sparkle.zip
        
        # Check if extraction succeeded and bin directory exists
        if [ ! -d "bin" ]; then
          echo "Error: Extraction failed or bin directory not found in archive"
          exit 1
        fi
        
        chmod +x bin/generate_appcast
        echo "Sparkle tools downloaded and extracted successfully"
        
    - name: Create docs directory if it doesn't exist
      run: mkdir -p docs

    - name: Download release assets for appcast generation
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create a releases directory for Sparkle to scan
        mkdir -p releases_temp
        
        # Get all releases and download their assets
        curl -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/${{ github.repository }}/releases | \
        jq -r '.[] | select(.draft == false and .prerelease == false) | .assets[] | select(.name | endswith(".zip")) | "\(.browser_download_url) \(.name)"' | \
        head -10 | \
        while read url filename; do
          echo "Downloading $filename from $url"
          curl -L -o "releases_temp/$filename" "$url"
        done
        
    - name: Generate appcast
      env:
        SPARKLE_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY_BASE64 }}
      run: |
        # Create private key file - decode from base64
        echo "$SPARKLE_PRIVATE_KEY" | base64 -D > private_key.pem
        
        # Generate appcast from the downloaded releases
        ./bin/generate_appcast \
          --ed-key-file private_key.pem \
          --download-url-prefix "https://github.com/${{ github.repository }}/releases/download/" \
          --release-notes-url-prefix "https://github.com/${{ github.repository }}/releases/tag/" \
          releases_temp/
          
        # Ensure correct version info in the appcast.xml
        if [[ -n "$VERSION" && -n "$BUILD_NUMBER" ]]; then
          # Fix version in the appcast
          sed -i '' "s|<title>Version .*</title>|<title>Version $VERSION</title>|g" appcast.xml
          sed -i '' "s|<sparkle:version>.*</sparkle:version>|<sparkle:version>$BUILD_NUMBER</sparkle:version>|g" appcast.xml
          sed -i '' "s|<sparkle:shortVersionString>.*</sparkle:shortVersionString>|<sparkle:shortVersionString>$VERSION</sparkle:shortVersionString>|g" appcast.xml
        fi
        
        # Move the generated appcast to docs folder
        mv appcast.xml docs/appcast.xml
        
        # Clean up
        rm private_key.pem
        rm -rf releases_temp
        
    - name: Commit and push appcast
      run: |
        git config --global user.name "Annie Hedgpeth"
        git config --global user.email "annie@hedge-ops.com"
        
        # Check if there are changes
        if git diff --quiet docs/appcast.xml; then
          echo "No changes to appcast"
        else
          git add docs/appcast.xml
          git commit -m "Update appcast for v${VERSION:-latest} (build ${BUILD_NUMBER:-unknown})"
          git push
        fi