name: Update Appcast

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  update-appcast:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Extract version from release
      id: extract_version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          # Get version from release tag (remove 'v' prefix if present)
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          VERSION="${RELEASE_TAG#v}"
        else
          # For manual dispatch, get the latest release version
          VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name' | sed 's/^v//')
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Extracted version: $VERSION"
        
    - name: Download Sparkle tools
      run: |
        curl -L -o sparkle.zip https://github.com/sparkle-project/Sparkle/releases/download/2.7.1/Sparkle-for-Swift-Package-Manager.zip
        unzip -o sparkle.zip
        chmod +x bin/generate_appcast
        
    - name: Create directories
      run: |
        mkdir -p docs
        mkdir -p releases
        
    - name: Download only latest release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | \
        jq -r '.assets[] | select(.name | endswith(".dmg")) | "\(.browser_download_url) \(.name)"' | \
        while read url filename; do
          echo "Downloading $filename"
          curl -L -o "releases/$filename" "$url"
        done

    - name: Generate appcast
      run: |
        echo "Generating appcast for version: $VERSION"
        ./bin/generate_appcast \
          --download-url-prefix "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/" \
          releases/
        
        # Copy the generated appcast to docs
        cp releases/appcast.xml docs/appcast.xml
        
        echo "Generated appcast:"
        cat docs/appcast.xml
        
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        commit-message: "Update appcast for v${{ env.VERSION }}"
        title: "Update appcast for v${{ env.VERSION }}"
        body: "Automated appcast update for version ${{ env.VERSION }}"
        branch: update-appcast-${{ github.run_id }}
        base: main
        delete-branch: true
        add-paths: |
          docs/appcast.xml
